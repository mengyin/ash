ash
library("ashr")
?ash
?normalmix
rnorm(100,0,0)
normalmix
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
warnings()
res
dim(res)
load("output/A/ash.hu/")
load("output/A/ash.hu/output.1.RData")
output
names(output)
score
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
res
aggregate(RMSE~scenario+method)
aggregate(RMSE~scenario+method,res,mean)
boxplot(RMSE~scenario+method,res,mean)
boxplot(RMSE~method+scenario,res,mean)
?mixFDR
?mixFdr
library("mixfdr")
?mixFdr
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
distance
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
try
?try
mixfdr.wrapper(input)
mixfdr.wrapper(data$input)
ls()
res
try(log("a"))
print(.Last.value)
tryCatch(log("a"),finally=FALSE)
x=tryCatch(log("a"),finally=FALSE)
x
xx=tryCatch(log("a"),finally=FALSE)
xx
xx=tryCatch(log("a"),finally=2)
xx=tryCatch(log("a"),finally=print("hello"))
xx
xx=tryCatch(1,finally=print("hello"))
xx
xx=tryCatch(1,error= function(e) e)
xx
xx=tryCatch(log("a"),error= function(e) e)
xx
inherits(x, "try-error")
x = try(log("a"))
inherits(x, "try-error")
x
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
res
dim(res)
boxplot(MSE ~ method + scenario, data=res)
boxplot(RMSE ~ method + scenario, data=res)
boxplot(RMSE ~ method + scenario, data=res[res$scenario==B])
boxplot(RMSE ~ method + scenario, data=res[res$scenario==B,])
boxplot(RMSE ~ method + scenario, data=res[res$scenario=="B",])
ggplot(res.melt,aes(Method,value,color=Method)) + geom_boxplot() + facet_grid(.~Scenario)
library(ggplot)
install.packages("ggplot2")
library(ggplot2)
ggplot(res.melt,aes(Method,value,color=Method)) + geom_boxplot() + facet_grid(.~Scenario)
ggplot(res,aes(Method,value,color=Method)) + geom_boxplot() + facet_grid(.~Scenario)
ggplot(res,aes(method,RMSA,color=method)) + geom_boxplot() + facet_grid(.~Scenario)
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
aggregate(RMSE~method+scenario,res, mean)
plot(res$RMSE[res$method=="mixfdr.enull"])
plot(res$RMSE[res$method=="mixfdr.enull"],res$RMSE[res$method=="ash.hu"])
abline(a=0,b=1)
data.frame(1:10000)
as.data.frame(1:10000)
data.frame(x=2,1:10000)
data.frame(x=2,t(data.frame(1:10000)))
data.frame(x=2,(data.frame(1:10000)))
data.frame(x=2,t(data.frame(1:10000)))
?stack
x=1:10
names(x)
names(x)=1:10
x
names(x)=100:110
names(x)=101:110
x
data.frame(x)
data.frame(t(x))
data.frame(x=2,t(data.frame(1:10000)))
x=1:10000
names(x)=1:10000
data.frame(y=2,t(data.frame(x)))
data.frame(y=2,data.frame(x))
data.frame(y=2,data.frame(t(x))
)
?prepend
data.frame(y=2,data.frame(x))
data.frame(data.frame(c(2,x)))
data.frame(data.frame(t(c(2,x)))))
data.frame(data.frame(t(c(2,x))))
data.frame(data.frame(t(c(2,x))))
data.frame(t(c(2,x)))
time(y=data.frame(t(c(2,x))))
?time
?sys.time
?Sys.time
?tic
system.time(y=data.frame(t(c(2,x))))
system.time(data.frame(t(c(2,x))))
system.time(data.frame((c(2,x))))
system.time(t(c(2,x))))
system.time(t(c(2,x)))
system.time(t(data.frame((c(2,x)))))
(t(data.frame((c(2,x)))))
t(data.frame((c(2,x)))))
t(data.frame((c(2,x))))
data.frame((c(2,x)))
data.frame((rbind(2,x)))
as.list(t(data.frame((c(2,x)))))
as.list(t(data.frame((c(2,x)))))[[1]]
runif
source("datamaker.R")
source("datamakers/datamaker.R")
system("ls")
system("pwd")
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
aggregate(RMSE~method+scenario,res, mean)
res[1,]
warnings()
res
reset_scenario("A")
reset_scenario("B")
reset_scenario("C")
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
res
boxplot(RMSE ~ method+scenario,res)
aggregate(RMSE~method+scenario,res, mean)
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
library(ggplot2)
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
warnings()
head(res)
head(res,n=100)
tail(res,n=100)
res[res$scenario=="A"]
res[res$scenario=="A",]
?subset
?ddply
aggregate(RMSE~method+scenario,res, mean)
warnings()
names(res)
str(res)
get_results_single_scenario
library("dscr")
get_results_singletrial
library(dscr)
get_results_single_trial
get_results_singletrial
res=run_dsc(scenarios,methods,score)
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
?ash
get_pi0
ashr:::get_pi0
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
seed
scenario
scorefn
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
methods
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
warnings()
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
res
score_methods(scenarios,methods,score)
temp=score_methods(scenarios,methods,score)
temp
get_results(scenarios,methods[[1]])
q()
get_results_singletrial(1,scenarios[[1]],methods[[1]])
results
load(file=resultsfilename(1,scenarios[[1]],methods[[1]]))
results
data.frame(seed=seed, scenario=scenario$name, method=method$name, results)
seed=1
data.frame(seed=seed, scenario=scenario$name, method=method$name, results)
data.frame(seed=seed, scenario=scenarios[[1]]$name, method=methods[[1]]$name, results)
q()
data.frame(seed=1,results)
get_results_singletrial(1,scenarios[[1]],methods[[1]])
scenario=scenarios[[1]]
method=methods[[1]]
seed=1
load(file=resultsfilename(seed,scenario,method))
results
data.frame(seed=1,results)
data.frame(results)
str(results)
data.frame(results)
temp=list(RMSE=0.8, MAE=0.573,pi0=0)
data.frame(temp)
temp=list(RMSE=0.8, MAE=0.573,pi0=0,p2=NULL)
data.frame(temp)
is.null
temp=list(RMSE=0.8, MAE=0.573,pi0=0,p2=NA)
data.frame(temp)
?NULL
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
results
get_results_singletrial(1,scenarios[[1]],methods[[1]])
load(file=resultsfilename(1,scenarios[[1]],methods[[1]]))
results
score_method_singletrial
score_method_singletrial(1,scenarios[[1]],methods[[1]],score)
results=score_method_singletrial(1,scenarios[[1]],methods[[1]],score)
is.null(results)
data.frame(c(1,NULL))
data.frame(c(x=1,y=NULL))
data.frame(cbind(x=1,y=NULL))
get_results
?get_results_singlescenario
get_results_singlescenario
library("dscr")
get_results_singlescenario
?dscr
??dscr
get_results_singletrial
source("scenarios.R")
source("methods.R")
source("score.R")
score
get_results_singletrial(1,scenarios[[1]],method[[1]])
get_results_singletrial(1,scenarios[[1]],methods[[1]])
library("dscr")
source("scenarios.R")
source("methods.R")
source("score.R")
get_results_singletrial(1,scenarios[[1]],methods[[1]])
load_results_singletrial(1,scenarios[[1]],methods[[1]])
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
load_results_singletrial(1,scenarios[[1]],methods[[1]])
results
res-load_results_singletrial(1,scenarios[[1]],methods[[1]])
res=load_results_singletrial(1,scenarios[[1]],methods[[1]])
res
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
inspect_results_singletrial(1,scenarios[[1]],methods[[1]])
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
inspect_output_singletrial(1,scenarios[[1]],methods[[1]])
inspect_output_singletrial(1,scenarios[[1]],methods[[3]])
inspect_output_singletrial(1,scenarios[[1]],methods[[4]])
inspect_output_singletrial(1,scenarios[[1]],methods[[5]])
inspect_output_singletrial(1,scenarios[[1]],methods[[6]])
methods
methods[[1]]
methods[[1]]$name
methods[[2]]$name
methods[[3]]$name
methods[[4]]$name
methods[[5]]$name
methods[[6]]$name
reset_method(methods[[1]])
reset_method("ash.hu")
reset_method("ash.u",force=TRUE)
reset_method("ash.n",force=TRUE)
res=run_dsc(scenarios,methods,score)
inspect_output_singletrial(1,scenarios[[1]],methods[[5]])
inspect_output_singletrial(1,scenarios[[1]],methods[[1]])
inspect_output_singletrial(1,scenarios[[1]],methods[[2]])
inspect_output_singletrial(1,scenarios[[1]],methods[[3]])
get_results_singletrial(1,scenarios[[1]],methods[[1]])
get_results_singletrial(1,scenarios[[2]],methods[[1]])
get_results_singletrial(1,scenarios[[3]],methods[[1]])
get_results_singletrial(1,scenarios[[4]],methods[[1]])
get_results_singletrial(1,scenarios[[4]],methods[[2]])
get_results_singletrial(1,scenarios[[4]],methods[[3]])
get_results_singletrial(1,scenarios[[4]],methods[[4]])
get_results_singletrial(1,scenarios[[4]],methods[[5]])
get_results_singletrial(1,scenarios[[4]],methods[[6]])
methods
get_results_singletrial(1,scenarios[[4]],methods[[6]])
length(methods)
length(scenarios)
get_results_singletrial(1,scenarios[[5]],methods[[5]])
get_results_singletrial(1,scenarios[[6]],methods[[5]])
get_results_singletrial(1,scenarios[[7]],methods[[5]])
get_results_singletrial(1,scenarios[[8]],methods[[5]])
score_methods(scenarios,methods,score)
aggregate_results(scenarios,methods)
print
library(dscr)
res=run_dsc(scenarios,methods,score)
source("scenarios.R")
source("methods.R")
source("score.R")
res=run_dsc(scenarios,methods,score)
mixfdr.enull
get_results_singletrial(1, scenarios[[1]],methods[[5]])
get_results_singletrial(1, scenarios[[5]],methods[[4]])
get_results_singletrial(1, scenarios[[6]],methods[[4]])
get_results_singletrial(1, scenarios[[8]],methods[[4]])
get_results_singletrial(100, scenarios[[8]],methods[[4]])
get_results_scenario(100, scenarios[[8]],methods[[4]])
get_results_scenario(100, scenarios[[8]])
get_results_scenario(scenarios[[8]])
get_results_scenario(scenarios[[8]],methods[[4]])
reset_scenario("easy")
res=run_dsc(scenarios,methods,score)
inspect_results_singletrial(1,scenarios[[8]],methods[[5]])
methods[[5]]$name
inspect_results_singletrial(2,scenarios[[8]],methods[[5]])
inspect_results_singletrial(3,scenarios[[8]],methods[[5]])
inspect_results_singletrial(4,scenarios[[8]],methods[[5]])
for(i in 1:100){inspect_results_singletrial(i,scenarios[[8]],methods[[5]])}
for(i in 1:100){get_results_singletrial(i,scenarios[[8]],methods[[5]])}
i
{inspect_results_singletrial(4,scenarios[[8]],methods[[5]])}
{inspect_results_singletrial(5,scenarios[[8]],methods[[5]])}
{inspect_results_singletrial(4,scenarios[[8]],methods[[5]])}
{get_results_singletrial(4,scenarios[[8]],methods[[5]])}
{get_results_singletrial(5,scenarios[[8]],methods[[5]])}
for(i in 1:100){get_results_singletrial(i,scenarios[[8]],methods[[5]])}
for(i in 1:100){get_results_singletrial(i,scenarios[[8]],methods[[5]]); print(i)}
{get_results_singletrial(9,scenarios[[8]],methods[[5]])}
{inspect_results_singletrial(9,scenarios[[8]],methods[[5]])}
?Negate
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
res=run_dsc(scenarios,methods,score)
{get_results_singletrial(9,scenarios[[8]],methods[[5]])}
{inspect_results_singletrial(9,scenarios[[8]],methods[[5]])}
get_results_singletrial
temp = {inspect_results_singletrial(9,scenarios[[8]],methods[[5]])}
temp
lapply(results, lapply, function(x)ifelse(is.null(x), NA, x))
lapply(temp, lapply, function(x)ifelse(is.null(x), NA, x))
temp
temp$pi0_est
is.null(temp$pi0_est)
lapply(is.null,temp)
lapply(temp,is.null)
lapply(temp, function(x)ifelse(is.null(x), NA, x))
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
res=run_dsc(scenarios,methods,score)
res
aggregate(RMSE~method+scenario,res, mean)
boxplot(res~method+scenario)
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
library(ggplot2)
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
plot(res$pi,res$pi0)
plot(res$pi0,res$pi0_est)
plot(res$pi0,res$pi0_est,col=res$method)
p=ggplot(data=res,aes(pi0,pi0_est,colour=method)) +geom_point(shape=1) +
facet_grid(. ~ scenario) +
geom_abline(colour = "black") +
xlab("True pi0") +
ylab("Estimated pi0")
print(p +scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(limits=c(0,1)) +
scale_colour_manual(values=cbbPalette,breaks=breaks,labels=labels) +
coord_equal(ratio=1))
print(p +scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(limits=c(0,1)) +
#scale_colour_manual(values=cbbPalette,breaks=breaks,labels=labels) +
coord_equal(ratio=1))
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
list_methods
list_methods(methods)
methods[[1]]
reset_method("ash.hu")
res=run_dsc(scenarios,methods,score)
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
res=run_dsc(scenarios,methods,score)
ls
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
res=run_dsc(scenarios,methods,score)
head(res)
tail(res)
library(dscr)
source("scenarios.R")
source("methods.R")
source("score.R")
res=run_dsc(scenarios,methods,score)
warnings()
methods %>% names
library("magrittr")
methods %>% names
names
methods %<% names
methods %>% unlist %>% names
methods %<% name
lapply(methods, function(x){x$name})
unlist(lapply(methods, function(x){x$name}))
unlist(ldply(methods, function(x){x$name}))
library("plyr")
unlist(ldply(methods, function(x){x$name}))
(ldply(methods, function(x){x$name}))
(ldply(methods, function(x){c(x$name,x$fn)}))
(ldply(methods, function(x){data.frame(x$name,x$fn)}))
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
library(ggplot2)
ggplot(res,aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
?ddply
?ggplot
?filter
library("dplyr")
?filter
ggplot(filter(res,method=="ash.hu"),aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
ggplot(filter(res,scenario %in% c("An","Bn","Cn")),aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
names(res)
ggplot(filter(res,scenario %in% c("An","Bn","Cn")),aes(method,elapsed,color=method)) + geom_boxplot() + facet_grid(.~scenario)
ggplot(res,aes(method,elapsed,color=method)) + geom_boxplot() + facet_grid(.~scenario)
ggplot(filter(res,scenario %in% c(A,B,C)),aes(method,elapsed,color=method)) + geom_boxplot() + facet_grid(.~scenario)
ggplot(filter(res,!(scenario %in% c("hard-b")),aes(method,elapsed,color=method)) + geom_boxplot() + facet_grid(.~scenario)
)
ggplot(filter(res,!(scenario %in% c("hard-b"))),aes(method,elapsed,color=method)) + geom_boxplot() + facet_grid(.~scenario)
p=ggplot(data=res,aes(pi0,pi0_est,colour=method)) +geom_point(shape=1) +
facet_grid(. ~ scenario) +
geom_abline(colour = "black") +
xlab("True pi0") +
ylab("Estimated pi0")
print(p +scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(limits=c(0,1)) +
#scale_colour_manual(values=cbbPalette,breaks=breaks,labels=labels) +
coord_equal(ratio=1))
p=ggplot(data=filter(res,scenario %in% c("hard","hard-b","easy")),aes(pi0,pi0_est,colour=method)) +geom_point(shape=1) +
facet_grid(. ~ scenario) +
geom_abline(colour = "black") +
xlab("True pi0") +
ylab("Estimated pi0")
print(p +scale_y_continuous(limits=c(0,1)) +
scale_x_continuous(limits=c(0,1)) +
#scale_colour_manual(values=cbbPalette,breaks=breaks,labels=labels) +
coord_equal(ratio=1))
save(res,file="res.RData")
source('~/Dropbox/Documents/git/ash/dsc-shrink/run_dsc.R')
load("res.RData")
inputPanel(
selectInput("scen.subset", label = "Scenario",
choices = c("A","B","C"), selected = "A")
)
library("shiny")
inputPanel(
selectInput("scen.subset", label = "Scenario",
choices = c("A","B","C"), selected = "A")
)
renderPlot({
ggplot(filter(res,scenario %in% input$scen.subset),aes(method,RMSE,color=method)) + geom_boxplot() + facet_grid(.~scenario)
})
res$scenario
unique(res$scenario)
choices  = unique(names(res$scenario)),
method_names = as.character(unique(res$methods))
unique(res$scenario)
method_names
names(res)
is.numeric(res)
lapply(is.numeric,res)
lapply(res,is.numeric)
numeric_critera = names(res)[lapply(res,is.numeric)]
names(res)
numeric_critera = names(res)[unlist(lapply(res,is.numeric))]
numeric_criteria
numeric_criteria = names(res)[unlist(lapply(res,is.numeric))]
numeric_criteria
str(names(res))
res$"RMSE"
res$"RMSE"
res.filter[["RMSE"]]
res[["RMSE"]]
install.packages("glmnet")
install.packages("ElemStatLearn")
